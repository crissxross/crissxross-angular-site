/* Class-based selectors for layouts & objects */

/* LAYOUT PRIMITIVES based on Every Layout https://every-layout.dev/layouts/ - I've adapted the naming conventions to make things clearer for my purposes */

/*********** LAYOUT PRIMITIVES ***********/

/* box-sizing overrides to content-box so that if left & right padding is needed, it won't take away from the --measure (default 75ch) maximum width */
.center-measure {
  box-sizing: content-box;
  margin-left: auto;
  margin-right: auto;
  max-width: var(--measure);
  padding-left: var(--s0);
  padding-right: var(--s0);
  // outline: 1px solid green;
}

.stack {
  --space: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--space);
}

.grid-auto {
  display: grid;
  gap: var(--s2);
}
@supports (width: min(340px, 100%)) {
  .grid-auto {
    grid-template-columns: repeat(auto-fit, minmax(min(340px, 100%), 1fr));
  }
}
// ðŸ‘† min() calculates the shortest length from a set of comma-separated values
// so if viewport is narrower than 340px, it goes to 100%
// @supports because a few mobile browsers don't yet support min()
// See https://every-layout.dev/layouts/grid/#the-solution

/* LAYOUT PRIMITIVE COMPONENTS - intrinsically styled */
// TODO: check these ðŸ‘‡

.box {
  padding: var(--s0);
  border: 1px #000 solid;
  --color-light: #fff;
  --color-dark: #000;
  color: var(--color-dark);
  background-color: var(--color-light);
}

.box * {
  color: inherit;
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

/*********** LAYOUT UTILITIES ***********/

// similar to stack layout primitive but for normal flow
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}

// NOTE: container is good for auto-grid of cards
.container {
  // individually set so they can be individually overwritten
  padding-top: var(--s2);
  padding-bottom: var(--s2);
  padding-left: var(--s2);
  padding-right: var(--s2);
}

.full-bleed {
  width: 100vw;
  margin-left: calc(50% - 50vw);
}

// to use with full bleed for consistent centred content - see https://piccalil.li/tutorial/creating-a-full-bleed-css-utility
.center-wrapper {
  max-width: var(--width, 60rem);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--pad, 0);
  padding-right: var(--pad, 0);
}
/* can also include padding left & right */

/*********** OBJECTS ***********/

.page-title,
.video-page-title {
  padding-top: var(--s0);
  padding-bottom: var(--s0);
}

// used with .center-wrapper
.video-page-title {
  padding-left: var(--s0);
  padding-right: var(--s0);
}

.container > .page-title,
.container > .video-page-title {
  padding-top: 0;
}

.video-select {
  padding-left: var(--s0);
  padding-right: var(--s0);
}

@media (min-width: 1160px) {
  .video-page-title,
  .video-select {
    padding-left: 0;
    padding-right: 0;
  }
}

.intro {
  padding-top: var(--s5);
  // outline: 1px solid white;
}

.hero-section {
  color: var(--clr-amber-700);
  h1 {
    font-size: var(--fs-900);
    font-weight: var(--fw-400);
  }
  h2 {
    font-size: var(--fs-600);
    font-weight: var(--fw-300);
  }
}

@media (min-width: 40rem) {
  .hero-section h1 {
      font-weight: var(--fw-300);
    }
}

// wrapper as used in web-platform tonmjs
// .wrapper {
//   display: flex;
//   flex-direction: column;
//   gap: var(--s-1);
//   min-height: 100vh;
//   padding: var(--s-1);
//   padding-right: 6rem;
// }
